using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.EntityFrameworkCore;
using exploitation_xss_reflected.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using exploitation_xss_reflected.Entites;

namespace exploitation_xss_reflected
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<ApplicationDbContext>(options =>
                options.UseSqlite(
                    Configuration.GetConnectionString("DefaultConnection")));
            services.AddDefaultIdentity<IdentityUser>(options => {

                options.SignIn.RequireConfirmedAccount = false;
                options.Password.RequiredLength = 3;
                options.Password.RequireLowercase = false;
                options.Password.RequireUppercase = false;
                options.Password.RequireNonAlphanumeric = false;
                options.Password.RequireDigit = false;

            })
                .AddRoles<IdentityRole>()
                .AddEntityFrameworkStores<ApplicationDbContext>();

            services.AddRazorPages(options =>
            {
                options.Conventions.AuthorizeFolder("/Books");
            });

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, IServiceProvider serviceProvider)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthentication();
            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapRazorPages();
            });

            ConfigureRoles(serviceProvider).Wait();

            ConfigureUsers(serviceProvider).Wait();
            InitializeBooks(serviceProvider);
        }


        private async Task ConfigureRoles(IServiceProvider serviceProvider)
        {
            var roleManager = serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();

            if(await roleManager.FindByNameAsync("Admin") == null){

                string[] availableRoles = { "Admin", "User" };

                foreach (var role in availableRoles)
                {
                    if (!await roleManager.RoleExistsAsync(role))
                    {
                        await roleManager.CreateAsync(new IdentityRole(role));
                    }
                }
            }
        }

        private async Task ConfigureUsers(IServiceProvider serviceProvider)
        {
            var userManager = serviceProvider.GetRequiredService<UserManager<IdentityUser>>();

            if(await userManager.FindByEmailAsync("admin@mail.com") == null){

                var admin = new IdentityUser { UserName = "admin@mail.com", Email = "admin@mail.com", EmailConfirmed = true };
                var adminResult = await userManager.CreateAsync(admin, "admin");

                if (adminResult.Succeeded)
                {
                    await userManager.AddToRoleAsync(admin, "Admin");
                }

                var user = new IdentityUser { UserName = "user@mail.com", Email = "user@mail.com", EmailConfirmed = true };
                var userResult = await userManager.CreateAsync(user, "user");

                if (userResult.Succeeded)
                {
                    await userManager.AddToRoleAsync(user, "User");
                }
            }
        }

        public void InitializeBooks(IServiceProvider serviceProvider)
        {
            var context = new ApplicationDbContext(
                serviceProvider.GetRequiredService<DbContextOptions<ApplicationDbContext>>());

            if (!context.Book.Any())
            {
                context.Book.AddRange(
                    new Book
                    {
                        Name = "Life 3.0: Being Human in the Age of Artificial Intelligence",
                        Author = "Max Tegmark"
                    },
                    new Book
                    {
                        Name = "Zero to One: Notes on Startups, or How to Build the Future",
                        Author = "Peter Thiel, Blake Masters"
                    },
                    new Book
                    {
                        Name = "Sapiens: A Brief History of Humankind",
                        Author = "Yuval Noah Harari"
                    },
                    new Book
                    {
                        Name = "Billions and Billions",
                        Author = "Carl Sagan"
                    },
                    new Book
                    {
                        Name = "Can't Hurt Me: Master Your Mind and Defy the Odds",
                        Author = "David Goggins"
                    },
                    new Book
                    {
                        Name = "1984",
                        Author = "George Orwell"
                    },
                    new Book
                    {
                        Name = "The Hitchhiker's Guide to the Galaxy",
                        Author = "Douglas Adams"
                    },
                    new Book
                    {
                        Name = "Contact: A Novel",
                        Author = "Carl Sagan"
                    },
                    new Book
                    {
                        Name = "Cosmos",
                        Author = "Carl Sagan"
                    }
                );

                context.SaveChanges();
            }

        }
    }
}
